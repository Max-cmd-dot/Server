{"version":3,"sources":["../../src/routes/passwordReset.js"],"names":["User","require","Token","sendEmail","crypto","Joi","express","router","Router","passwordComplexity","bcrypt","post","req","res","schema","object","email","string","required","error","validate","body","status","send","details","message","user","findOne","token","userId","_id","randomBytes","toString","save","link","text","console","log","password","label","salt","genSalt","Number","process","env","SALT","hashPassword","hash","findById","delete","module","exports"],"mappings":"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","file":"passwordReset.js","sourcesContent":["const { User } = require(\"../models/user\");\r\nconst Token = require(\"../models/token\");\r\nconst sendEmail = require(\"../utils/sendEmail\");\r\nconst crypto = require(\"crypto\");\r\nconst Joi = require(\"joi\");\r\nconst express = require(\"express\");\r\nconst router = express.Router();\r\nconst passwordComplexity = require(\"joi-password-complexity\");\r\nconst bcrypt = require(\"bcrypt\");\r\n\r\nrouter.post(\"/\", async (req, res) => {\r\n  try {\r\n    const schema = Joi.object({ email: Joi.string().email().required() });\r\n    const { error } = schema.validate(req.body);\r\n    if (error) return res.status(400).send(error.details[0].message);\r\n\r\n    const user = await User.findOne({ email: req.body.email });\r\n    //console.log(user);\r\n    if (!user)\r\n      return res.status(400).send(\"user with given email doesn't exist\");\r\n\r\n    let token = await Token.findOne({ userId: user._id });\r\n    //console.log(token);\r\n    if (!token) {\r\n      token = await new Token({\r\n        userId: user._id,\r\n        token: crypto.randomBytes(32).toString(\"hex\"),\r\n      }).save();\r\n    }\r\n\r\n    const link = `http://20.219.193.229:3000/reset_password/${user._id}/${token.token}`;\r\n    //console.log(link);\r\n    const text =\r\n      `In the following you will find the link to reset your password!\r\n      ` + link;\r\n    await sendEmail(user.email, \"Password reset\", text);\r\n\r\n    res.send(\"password reset link sent to your email account\");\r\n  } catch (error) {\r\n    res.send(\"An error occured\");\r\n    console.log(error);\r\n  }\r\n});\r\n\r\nrouter.post(\"/resetvalidate\", async (req, res) => {\r\n  try {\r\n    const schema = Joi.object({\r\n      password: passwordComplexity().required().label(\"Password\"),\r\n      token: Joi.string().required(),\r\n      _id: Joi.string().required(),\r\n    });\r\n    const { error } = schema.validate(req.body);\r\n    if (error) return res.status(400).send(error.details[0].message);\r\n    const salt = await bcrypt.genSalt(Number(process.env.SALT));\r\n    const hashPassword = await bcrypt.hash(req.body.password, salt);\r\n    const user = await User.findById(req.body._id);\r\n    //console.log(req.body.userId);\r\n    if (!user) return res.status(400).send(\"invalid link or expired\");\r\n\r\n    const token = await Token.findOne({\r\n      userId: user._id,\r\n      token: req.body.token,\r\n    });\r\n    if (!token) return res.status(400).send(\"Invalid link or expired\");\r\n\r\n    user.password = hashPassword;\r\n    await user.save();\r\n    await token.delete();\r\n\r\n    res.send(\"password reset sucessfully.\");\r\n  } catch (error) {\r\n    res.send(\"An error occured\");\r\n    console.log(error);\r\n  }\r\n});\r\n\r\nmodule.exports = router;\r\n"]}