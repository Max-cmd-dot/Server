{"version":3,"sources":["../../src/routes/apiuserdata.js"],"names":["router","require","Router","User","bcrypt","Joi","get","req","res","error","validate","params","status","send","message","details","user","findOne","_id","id","console","log","schema","object","string","required","label","module","exports"],"mappings":"AAAA,MAAMA,SAASC,QAAQ,SAAR,EAAmBC,MAAnB,EAAf;AACA,MAAM,EAAEC,IAAF,KAAWF,QAAQ,uBAAR,CAAjB;AACA,MAAMG,SAASH,QAAQ,QAAR,CAAf;AACA,MAAMI,MAAMJ,QAAQ,KAAR,CAAZ;;AAEAD,OAAOM,GAAP,CAAW,MAAX,EAAmB,OAAOC,GAAP,EAAYC,GAAZ,KAAoB;AACrC,MAAI;AACF,UAAM,EAAEC,KAAF,KAAYC,SAASH,IAAII,MAAb,CAAlB;AACA,QAAIF,KAAJ,EACE,OAAOD,IAAII,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB,EAAEC,SAASL,MAAMM,OAAN,CAAc,CAAd,EAAiBD,OAA5B,EAArB,CAAP;;AAEF,UAAME,OAAO,MAAMb,KAAKc,OAAL,CAAa,EAAEC,KAAKX,IAAII,MAAJ,CAAWQ,EAAlB,EAAb,CAAnB;;AAEA,QAAI,CAACH,IAAL,EAAW,OAAOR,IAAII,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB,EAAEC,SAAS,eAAX,EAArB,CAAP;;AAEXN,QAAII,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqBG,IAArB;AACD,GAVD,CAUE,OAAOP,KAAP,EAAc;AACdD,QAAII,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB,EAAEC,SAAS,uBAAX,EAArB;AACAM,YAAQC,GAAR,CAAY,OAAZ;AACD;AACF,CAfD;;AAiBA,MAAMX,WAAYC,MAAD,IAAY;AAC3B,QAAMW,SAASjB,IAAIkB,MAAJ,CAAW;AACxBJ,QAAId,IAAImB,MAAJ,GAAaC,QAAb,GAAwBC,KAAxB,CAA8B,IAA9B;AADoB,GAAX,CAAf;AAGA,SAAOJ,OAAOZ,QAAP,CAAgBC,MAAhB,CAAP;AACD,CALD;;AAOAgB,OAAOC,OAAP,GAAiB5B,MAAjB","file":"apiuserdata.js","sourcesContent":["const router = require(\"express\").Router();\r\nconst { User } = require(\"../models/apiuserdata\");\r\nconst bcrypt = require(\"bcrypt\");\r\nconst Joi = require(\"joi\");\r\n\r\nrouter.get(\"/:id\", async (req, res) => {\r\n  try {\r\n    const { error } = validate(req.params);\r\n    if (error)\r\n      return res.status(400).send({ message: error.details[0].message });\r\n\r\n    const user = await User.findOne({ _id: req.params.id });\r\n\r\n    if (!user) return res.status(401).send({ message: \"Invalid login\" });\r\n\r\n    res.status(200).send(user);\r\n  } catch (error) {\r\n    res.status(500).send({ message: \"Internal Server Error\" });\r\n    console.log(\"error\");\r\n  }\r\n});\r\n\r\nconst validate = (params) => {\r\n  const schema = Joi.object({\r\n    id: Joi.string().required().label(\"id\"),\r\n  });\r\n  return schema.validate(params);\r\n};\r\n\r\nmodule.exports = router;\r\n"]}