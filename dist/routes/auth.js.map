{"version":3,"sources":["../../src/routes/auth.js"],"names":["router","require","Router","User","bcrypt","Joi","post","req","res","error","validate","body","status","send","message","details","user","findOne","email","validPassword","compare","password","token","generateAuthToken","userid","_id","group","data","userId","schema","object","string","required","label","module","exports"],"mappings":"AAAA,MAAMA,SAASC,QAAQ,SAAR,EAAmBC,MAAnB,EAAf;AACA,MAAM,EAAEC,IAAF,KAAWF,QAAQ,gBAAR,CAAjB;AACA,MAAMG,SAASH,QAAQ,QAAR,CAAf;AACA,MAAMI,MAAMJ,QAAQ,KAAR,CAAZ;;AAEAD,OAAOM,IAAP,CAAY,GAAZ,EAAiB,OAAOC,GAAP,EAAYC,GAAZ,KAAoB;AACnC,MAAI;AACF,UAAM,EAAEC,KAAF,KAAYC,SAASH,IAAII,IAAb,CAAlB;AACA,QAAIF,KAAJ,EACE,OAAOD,IAAII,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB,EAAEC,SAASL,MAAMM,OAAN,CAAc,CAAd,EAAiBD,OAA5B,EAArB,CAAP;;AAEF,UAAME,OAAO,MAAMb,KAAKc,OAAL,CAAa,EAAEC,OAAOX,IAAII,IAAJ,CAASO,KAAlB,EAAb,CAAnB;AACA,QAAI,CAACF,IAAL,EACE,OAAOR,IAAII,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB,EAAEC,SAAS,2BAAX,EAArB,CAAP;;AAEF,UAAMK,gBAAgB,MAAMf,OAAOgB,OAAP,CAC1Bb,IAAII,IAAJ,CAASU,QADiB,EAE1BL,KAAKK,QAFqB,CAA5B;AAIA,QAAI,CAACF,aAAL,EACE,OAAOX,IAAII,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB,EAAEC,SAAS,2BAAX,EAArB,CAAP;;AAEF,UAAMQ,QAAQN,KAAKO,iBAAL,EAAd;AACA,UAAMC,SAASR,KAAKS,GAApB;AACA,UAAMC,QAAQV,KAAKU,KAAnB;AACAlB,QAAII,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB;AACnBc,YAAM;AACJL,aADI;AAEJM,gBAAQJ,MAFJ;AAGJE;AAHI,OADa;AAMnBZ,eAAS;AANU,KAArB;AAQD,GA3BD,CA2BE,OAAOL,KAAP,EAAc;AACdD,QAAII,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB,EAAEC,SAAS,uBAAX,EAArB;AACD;AACF,CA/BD;;AAiCA,MAAMJ,WAAYiB,IAAD,IAAU;AACzB,QAAME,SAASxB,IAAIyB,MAAJ,CAAW;AACxBZ,WAAOb,IAAI0B,MAAJ,GAAab,KAAb,GAAqBc,QAArB,GAAgCC,KAAhC,CAAsC,OAAtC,CADiB;AAExBZ,cAAUhB,IAAI0B,MAAJ,GAAaC,QAAb,GAAwBC,KAAxB,CAA8B,UAA9B;AAFc,GAAX,CAAf;AAIA,SAAOJ,OAAOnB,QAAP,CAAgBiB,IAAhB,CAAP;AACD,CAND;;AAQAO,OAAOC,OAAP,GAAiBnC,MAAjB","file":"auth.js","sourcesContent":["const router = require(\"express\").Router();\r\nconst { User } = require(\"../models/user\");\r\nconst bcrypt = require(\"bcrypt\");\r\nconst Joi = require(\"joi\");\r\n\r\nrouter.post(\"/\", async (req, res) => {\r\n  try {\r\n    const { error } = validate(req.body);\r\n    if (error)\r\n      return res.status(400).send({ message: error.details[0].message });\r\n\r\n    const user = await User.findOne({ email: req.body.email });\r\n    if (!user)\r\n      return res.status(401).send({ message: \"Invalid Email or Password\" });\r\n\r\n    const validPassword = await bcrypt.compare(\r\n      req.body.password,\r\n      user.password\r\n    );\r\n    if (!validPassword)\r\n      return res.status(401).send({ message: \"Invalid Email or Password\" });\r\n\r\n    const token = user.generateAuthToken();\r\n    const userid = user._id;\r\n    const group = user.group;\r\n    res.status(200).send({\r\n      data: {\r\n        token,\r\n        userId: userid,\r\n        group,\r\n      },\r\n      message: \"Logged in successfully\",\r\n    });\r\n  } catch (error) {\r\n    res.status(500).send({ message: \"Internal Server Error\" });\r\n  }\r\n});\r\n\r\nconst validate = (data) => {\r\n  const schema = Joi.object({\r\n    email: Joi.string().email().required().label(\"Email\"),\r\n    password: Joi.string().required().label(\"Password\"),\r\n  });\r\n  return schema.validate(data);\r\n};\r\n\r\nmodule.exports = router;\r\n"]}