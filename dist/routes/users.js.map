{"version":3,"sources":["../../src/routes/users.js"],"names":["router","require","Router","User","validate","bcrypt","post","req","res","error","body","status","send","message","details","user","findOne","email","salt","genSalt","Number","process","env","SALT","hashPassword","hash","password","newUser","Object","assign","save","module","exports"],"mappings":"AAAA,MAAMA,SAASC,QAAQ,SAAR,EAAmBC,MAAnB,EAAf;AACA,MAAM,EAAEC,IAAF,EAAQC,QAAR,KAAqBH,QAAQ,gBAAR,CAA3B;AACA,MAAMI,SAASJ,QAAQ,QAAR,CAAf;;AAEAD,OAAOM,IAAP,CAAY,GAAZ,EAAiB,OAAOC,GAAP,EAAYC,GAAZ,KAAoB;AACnC,MAAI;AACF,UAAM,EAAEC,KAAF,KAAYL,SAASG,IAAIG,IAAb,CAAlB;AACA,QAAID,KAAJ,EACE,OAAOD,IAAIG,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB,EAAEC,SAASJ,MAAMK,OAAN,CAAc,CAAd,EAAiBD,OAA5B,EAArB,CAAP;;AAEF,UAAME,OAAO,MAAMZ,KAAKa,OAAL,CAAa,EAAEC,OAAOV,IAAIG,IAAJ,CAASO,KAAlB,EAAb,CAAnB;AACA,QAAIF,IAAJ,EACE,OAAOP,IACJG,MADI,CACG,GADH,EAEJC,IAFI,CAEC,EAAEC,SAAS,sCAAX,EAFD,CAAP;;AAIF,UAAMK,OAAO,MAAMb,OAAOc,OAAP,CAAeC,OAAOC,QAAQC,GAAR,CAAYC,IAAnB,CAAf,CAAnB;AACA,UAAMC,eAAe,MAAMnB,OAAOoB,IAAP,CAAYlB,IAAIG,IAAJ,CAASgB,QAArB,EAA+BR,IAA/B,CAA3B;AACA,UAAMS,UAAUC,OAAOC,MAAP,CAAc,EAAd,EAAkBtB,IAAIG,IAAtB,EAA4B,EAAEgB,UAAUF,YAAZ,EAA5B,CAAhB;AACA,UAAM,IAAIrB,IAAJ,CAASwB,OAAT,EAAkBG,IAAlB,EAAN;AACA;AACA;AACD,GAjBD,CAiBE,OAAOrB,KAAP,EAAc;AACdD,QAAIG,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB,EAAEC,SAAS,uBAAX,EAArB;AACD;AACF,CArBD;;AAuBAkB,OAAOC,OAAP,GAAiBhC,MAAjB","file":"users.js","sourcesContent":["const router = require(\"express\").Router();\r\nconst { User, validate } = require(\"../models/user\");\r\nconst bcrypt = require(\"bcrypt\");\r\n\r\nrouter.post(\"/\", async (req, res) => {\r\n  try {\r\n    const { error } = validate(req.body);\r\n    if (error)\r\n      return res.status(400).send({ message: error.details[0].message });\r\n\r\n    const user = await User.findOne({ email: req.body.email });\r\n    if (user)\r\n      return res\r\n        .status(409)\r\n        .send({ message: \"User with given email already Exist!\" });\r\n\r\n    const salt = await bcrypt.genSalt(Number(process.env.SALT));\r\n    const hashPassword = await bcrypt.hash(req.body.password, salt);\r\n    const newUser = Object.assign({}, req.body, { password: hashPassword });\r\n    await new User(newUser).save();\r\n    //await new User({ ...req.body, password: hashPassword }).save();\r\n    //res.status(201).send({ message: \"User created successfully\" });\r\n  } catch (error) {\r\n    res.status(500).send({ message: \"Internal Server Error\" });\r\n  }\r\n});\r\n\r\nmodule.exports = router;\r\n"]}