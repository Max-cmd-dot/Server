{"version":3,"sources":["../../src/models/user.js"],"names":["mongoose","require","jwt","Joi","passwordComplexity","userSchema","Schema","firstName","type","String","required","lastName","email","password","group","methods","generateAuthToken","token","sign","_id","process","env","JWTPRIVATEKEY","expiresIn","User","model","validate","data","schema","object","string","label","module","exports"],"mappings":"AAAA,MAAMA,WAAWC,QAAQ,UAAR,CAAjB;AACA,MAAMC,MAAMD,QAAQ,cAAR,CAAZ;AACA,MAAME,MAAMF,QAAQ,KAAR,CAAZ;AACA,MAAMG,qBAAqBH,QAAQ,yBAAR,CAA3B;;AAEA,MAAMI,aAAa,IAAIL,SAASM,MAAb,CAAoB;AACrCC,aAAW,EAAEC,MAAMC,MAAR,EAAgBC,UAAU,IAA1B,EAD0B;AAErCC,YAAU,EAAEH,MAAMC,MAAR,EAAgBC,UAAU,IAA1B,EAF2B;AAGrCE,SAAO,EAAEJ,MAAMC,MAAR,EAAgBC,UAAU,IAA1B,EAH8B;AAIrCG,YAAU,EAAEL,MAAMC,MAAR,EAAgBC,UAAU,IAA1B,EAJ2B;AAKrCI,SAAO,EAAEN,MAAMC,MAAR,EAAgBC,UAAU,IAA1B,EAL8B,CAKI;AALJ,CAApB,CAAnB;;AAQAL,WAAWU,OAAX,CAAmBC,iBAAnB,GAAuC,YAAY;AACjD,QAAMC,QAAQf,IAAIgB,IAAJ,CACZ,EAAEC,KAAK,KAAKA,GAAZ,EAAiBL,OAAO,KAAKA,KAA7B,EADY,EAEZM,QAAQC,GAAR,CAAYC,aAFA,EAGZ;AACEC,eAAW;AADb,GAHY,CAAd;AAOA,SAAON,KAAP;AACD,CATD;;AAWA,MAAMO,OAAOxB,SAASyB,KAAT,CAAe,MAAf,EAAuBpB,UAAvB,CAAb;;AAEA,MAAMqB,WAAYC,IAAD,IAAU;AACzB,QAAMC,SAASzB,IAAI0B,MAAJ,CAAW;AACxBtB,eAAWJ,IAAI2B,MAAJ,GAAapB,QAAb,GAAwBqB,KAAxB,CAA8B,YAA9B,CADa;AAExBpB,cAAUR,IAAI2B,MAAJ,GAAapB,QAAb,GAAwBqB,KAAxB,CAA8B,WAA9B,CAFc;AAGxBnB,WAAOT,IAAI2B,MAAJ,GAAalB,KAAb,GAAqBF,QAArB,GAAgCqB,KAAhC,CAAsC,OAAtC,CAHiB;AAIxBlB,cAAUT,qBAAqBM,QAArB,GAAgCqB,KAAhC,CAAsC,UAAtC,CAJc;AAKxBjB,WAAOX,IAAI2B,MAAJ,GAAapB,QAAb,GAAwBqB,KAAxB,CAA8B,OAA9B,CALiB,CAKuB;AALvB,GAAX,CAAf;AAOA,SAAOH,OAAOF,QAAP,CAAgBC,IAAhB,CAAP;AACD,CATD;;AAWAK,OAAOC,OAAP,GAAiB,EAAET,IAAF,EAAQE,QAAR,EAAjB","file":"user.js","sourcesContent":["const mongoose = require(\"mongoose\");\r\nconst jwt = require(\"jsonwebtoken\");\r\nconst Joi = require(\"joi\");\r\nconst passwordComplexity = require(\"joi-password-complexity\");\r\n\r\nconst userSchema = new mongoose.Schema({\r\n  firstName: { type: String, required: true },\r\n  lastName: { type: String, required: true },\r\n  email: { type: String, required: true },\r\n  password: { type: String, required: true },\r\n  group: { type: String, required: true }, // Assuming the user's associated group is stored in the 'group' field\r\n});\r\n\r\nuserSchema.methods.generateAuthToken = function () {\r\n  const token = jwt.sign(\r\n    { _id: this._id, group: this.group },\r\n    process.env.JWTPRIVATEKEY,\r\n    {\r\n      expiresIn: \"7d\",\r\n    }\r\n  );\r\n  return token;\r\n};\r\n\r\nconst User = mongoose.model(\"user\", userSchema);\r\n\r\nconst validate = (data) => {\r\n  const schema = Joi.object({\r\n    firstName: Joi.string().required().label(\"First Name\"),\r\n    lastName: Joi.string().required().label(\"Last Name\"),\r\n    email: Joi.string().email().required().label(\"Email\"),\r\n    password: passwordComplexity().required().label(\"Password\"),\r\n    group: Joi.string().required().label(\"Group\"), // Adding group validation\r\n  });\r\n  return schema.validate(data);\r\n};\r\n\r\nmodule.exports = { User, validate };\r\n"]}